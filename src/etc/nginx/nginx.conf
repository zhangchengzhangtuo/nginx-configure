#运行用户
user www-data;

#nginx采用的是多进程的工作模式，包括一个master进程和多个worker进程
#master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程
#而基本的网络事件，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致
worker_processes 4;

#PID文件
pid /run/nginx.pid;

events {
        #单个后台worker进程的最大并发连接数
        #而事实上在操作系统中，通过ulimit -n，我们可以得到一个进程所能够打开的fd的最大数，即nofile，因为每个socket连接会占用掉一个fd，所以这也会限制我们进程的最大连接数，当然也会直接影响到我们程序所能支持的最大并发数，当fd用完后，再创建socket时，就会失败。
        #所以在设置这个值的时候如果比nofile还要大的话，那么实际的最大连接数就是nofile，并且这个时候nginx会有警告。
        worker_connections 768;

        #multi_accept在Nginx接到一个新连接通知后调用accept()来接受尽量多的连接 。（这个还是不太理解）
        # multi_accept on;
}

http {

        ##
        # Basic Settings
        ##

        #sendfile指令指定nginx是否调用sendfile函数（zero copy方式）来输出文件，对于普通应用，必须设为on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统的uptime
        #见附录1
        sendfile on;

        #和tcp_nodelay的作用刚好相反，相互排斥，当使用sendfile函数时，tcp_nopush才会起作用
        #tcp_nopush = on 会设置调用tcp_cork方法，这个也是默认的，结果就是数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。这个选项对于www,ftp等大文件很有帮助
        tcp_nopush on;

        #立即发送数据，而不是缓存起来（禁止Nagle算法），设置为on非常适合于实时频繁发送小数据（如果是图片，pdf，ppt文件之类不是小数据的，应该设置为off）
        tcp_nodelay off;

        #keep-alive连接的超时时间.服务器在这个超时时间之后会关闭这个连接.
        keepalive_timeout 65;

        #定义了nginx的哈希表的大小
        types_hash_max_size 2048;

        #隐藏Server:nginx版本号，主要从安全性的角度考虑的。
        # server_tokens off;

        # server_names_hash_bucket_size指定的是servername的哈希表大小
        # server_names_hash_bucket_size 64;

        # server_name_in_redirect off;


        #文件扩展名与文件类型映射表
        include /etc/nginx/mime.types;
        #默认文件类型
        default_type application/octet-stream;


        ##
        # Logging Settings
        ##
        #配置日志打印格式和内容
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

        #访问日志和错误日志的位置
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;


        ##
        # Gzip Settings
        ##
        #压缩设置，减少网络传输数据量
        gzip on;
        #如果是IE6浏览器则禁止使用压缩
        gzip_disable "msie6";
        # gzip_vary on;           #和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
        # gzip_proxied any;       #Nginx做为反向代理的时候启用，any – 无条件压缩所有结果数据
        # gzip_comp_level 6;      #压缩等级，级别越高压缩率越大，当然压缩时间也就越长（传输比较快但比较消耗CPU）
        # gzip_buffers 16 8k;     #压缩缓冲区大小
        # gzip_http_version 1.1;  #压缩版本
        # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #压缩类型


        #Naxsi是基于nginx的一个轻量级的第三方Web安全防护模块，可以实现对Web应用层各种恶意攻击的防护，如SQL injiection、XSS、CSRF、Directory traversal等攻击，能够对Web应用层的Get、Post、Cookie这些请求行为进行完整的检测和过滤。
        #Naxsi其主要防护机制是通过内置的一套极其严格的核心规则库（Core Rules）来实现威胁阻断，并通过用户自定义的白名单（White List）来防止正常的请求被误杀，通过这样正反两端的不断优化配合，来实现安全防护和业务访问的平衡。
        ##
        # nginx-naxsi config
        ##
        # Uncomment it if you installed nginx-naxsi
        ##
        #include /etc/nginx/naxsi_core.rules;


        #Passenger是一个Rails应用服务的管理工具，可以统一管理Rails进程的数量、生命周期、请求队列等等。
        ##
        # nginx-passenger config
        ##
        # Uncomment it if you installed nginx-passenger
        ##
        #passenger_root /usr;
        #passenger_ruby /usr/bin/ruby;

        #配置负载均衡器
        upstream loaderName {
                #定义后端服务器的地址和状态，这些状态值含义如下：
                #1）down    表示当前的server暂时不参与负载
                #2）weight  默认为1 见后面的负载策略
                #3）max_fails 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream模块定义的错误。
                #4）fail_timeout max_fails次失败后，暂停的时间。
                #5）其他所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。
                server 127.0.0.1:8080 down;
                server 127.0.0.1:8081;
                #负载均衡策略，如果不配置，默认采用轮询方式。其他分配策略如下：
                #2)weight（权重），如果是权重需要在每个server后面配置权重比（weight越大，负载的权重就越大），如server 127.0.0.1：8080 weight=5;
                #3）ip_hash（访问ip） 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
                #4）fair 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似
                #5）url_hash 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。配置方式：hash $request_uri; hash_method crc32;
                fair;
        }

        #负载均衡器使用：
        #将server节点下的location节点中的proxy_pass配置为：http:// + upstream名称，即"http://loaderName".
        #有的时候为http://+upstream名称+"/"，即"http://loaderName/"

        //配置IP虚拟主机
        server{
                listen 80;                              #nginx监听的端口，即该虚拟主机的端口（http核心模块）
                server_name nginx.cn www.nginx.cn;      #虚拟主机的域名，根据请求头部的内容，一个ip的服务器可以配置多个域名。多个域名之间以空格分隔。nginx允许一个虚拟主机有一个或多个名字，也可以使用通配符"*"来设置虚拟主机的名字。
                index index.html index.htm index.php;   #默认主页设置模块
                root /home/www;                         #请求到达后的文件根目录,可以是相对路径，也可以是绝对路径。
                location / {
                        proxy_pass http://127.0.0.1:8080/;
                }
        }

        //配置域名虚拟主机（通过该配置既可以使用IP访问亦可以通过域名访问）
        //该配置使用方式需要配置/etc/hosts文件
        server{
        	listen 80;
        	server_name admin.apin.com;
        	index index.html;
        	location / {
        		proxy_pass http://admin.apin.com:8079;
        	}
          }

        //https连接
        server{
           listen 443;
           ssl on;
           #ssl_certificate /home/apinji/ssh/completedDemo/server.crt;
           #ssl_certificate_key /home/apinji/ssh/completedDemo/server.key;
           ssl_certificate /home/apinji/https/server.cer;
           ssl_certificate_key /home/apinji/https/server-key.pem;

           location /{
                proxy_pass http://127.0.0.1:8081/;
           }



        #配置虚拟主机，虚拟主机可以配置在这个配置文件也可以配置在下面的目录中default文件
        ##
        # Virtual Host Configs
        ##
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}


#mail {
#       # See sample authentication script at:
#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#       # auth_http localhost/auth.php;
#       # pop3_capabilities "TOP" "USER";
#       # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#       server {
#               listen     localhost:110;
#               protocol   pop3;
#               proxy      on;
#       }
#
#       server {
#               listen     localhost:143;
#               protocol   imap;
#               proxy      on;
#       }
#}
